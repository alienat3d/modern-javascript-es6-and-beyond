// * 5.0 У нас есть простая функция для сложения чисел. Но что, если мы, например, не знаем сколько аргументов будет у этой функции? Здесь приходит на помощь rest-оператор, который записывается как три точки и название, которое мы ему дадим. Мы можем быть уверены, что в данном случае у нас всегда будут минимум два аргумента, т.ч. оставим также "a" & "b", а "values" будет массивом, содержащем все остальные аргументы, кроме первых двух.
// ? 5.1 Также rest-оператор должен быть всегда последним из аргументов.
// 5.2 Далее мы могли бы сложить сперва первые 2 аргумента, т.к. мы уверены, что они всегда будут, а потом при помощи метода перебора прибавить все параметры из массива "values" к этой первоначальной сумме.
function sum(a, b, ...values) {
  console.log(values);

  let sum = a + b;

  values.forEach((value) => (sum += value));

  return sum;
}

console.log(sum(1, 2, 3, 4, 5));

// 5.3 Зачем нужен "spread-оператор" рассмотрим на данном примере фиктивного функционала корзины с товарами в каком-то онлайн-магазине. Здесь у нас 3 объекта, в первом имя клиента, во втором содержимое его корзины и в третьем адрес, который указал клиент при создании заказа. И в итоге нам нужно объединить данные из всех трёх объектов в одном большом объекте, чтобы переслать на бэкенд для дальнейшей обработки.
// ? 5.4 "spread-оператор" синтаксически чем-то похож на "rest-оператор", то используется для другой, можно сказать противоположной цели. В то время как первый "собирает", то второй "развёртывает" помещаемые в него данные. Он создаёт новый объект, который содержит копии данных, помещаемых в него объектов.
const user = { name: 'John Doe' };

const cart = {
  items: [
    { name: 'shirt', quantity: 1 },
    { name: 'cap', quantity: 2 },
  ],
};

const deliveryAddress = {
  street: '100 Main Street',
  city: 'Miami',
  state: 'FL',
};

const purchase = {
  ...user,
  ...cart,
  ...deliveryAddress,
};

console.log(purchase);
