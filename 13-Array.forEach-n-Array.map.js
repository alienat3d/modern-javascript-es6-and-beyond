// * 11.0 Метод массивов "forEach". С помощью него мы можем проделывать какие-то действия с каждым из элементов всего массива.
// 11.1 К примеру, у нас есть массив чисел и нам нужно сравнить каждое из них с 50 и вывести в консоль больше оно или меньше. Сперва рассмотрим как мы сделали бы это циклом "for of".
const score = [89, 20, 24, 86, 16, 83];

for (const point of score) {
  console.log(`${point} is ${point > 50 ? 'higher' : 'lower'} than 50`);
}

// 11.2 А теперь сделаем то же методом "forEach". Но только метод "forEach" не изменяет оригинальный массив. Он просто применяет коллбэк-функцию на каждом элементе массива. Это гораздо безопаснее, т.к. коллбэк-функция ограничивается своей областью видимости и не может навредить данным снаружи, как это может произойти с циклом for.
score.forEach((point) => {
  console.log(`${point} is ${point > 50 ? 'higher' : 'lower'} than 50`);
});

// * 12.0 Метод "map" — создаёт новый массив из возвращённых коллбэк-функцией данных. Другими словами создаёт новый изменённый массив на основе старого.
// 12.1 Для примера можем использовать всё тот же массив "score" и на его основе создадим новый массив, состоящий из слов "higher" или "lower", в зависимости от того было значение элемента на этом месте больше или меньше 50.
const scoreWords = score.map((point) => {
  return point > 50 ? 'higher' : 'lower';
});

console.log(scoreWords);

// 12.2 Или, например, представим, что у нас массив, состоящий из чисел с дробным остатком и нам нужно округлить их в ближайшую сторону.
const numbers = [9.2, 10.38, 7.85, 99.95, 17.05, 23.455, 49.5];
const integers = numbers.map((number) => Math.round(number));

console.log(integers);
