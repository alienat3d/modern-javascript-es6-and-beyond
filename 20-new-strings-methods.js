// * 19.0 В ES6 появились и новые методы строк, например "repeat", "startsWith", "endsWith", "includes", "padStart" & "padEnd".
// ? 19.1 С помощью "repeat" мы можем повторять строку заданное кол-во раз. Например, мы хотим повторить строку "Watch out!" 3 раза, для этого используем метод "repeat" и передадим в него кол-во необходимых повторений.
const warning = 'Watch out! ';

console.log(warning.repeat(3));

// ====== //
// ? 19.2 "startsWith" & "endsWith" возвращают булево значение, в зависимости от того, если цель применения начинается или заканчивается на помещённое в них значение.
// 19.2.1 Например, у нас есть ссылка на пост блога и мы хотим проверить, что ссылка начинается на "https", а не на "http".
const url = 'https://www.website.com/blog/my-article/id/1';

console.log(url.startsWith('https'));
console.log(url.startsWith('http://'));

// 19.2.2 Если нам нужно проверить, что пост первый по его id в конце ссылки, то можно использовать для этого метод "endsWith".
console.log(url.endsWith(1));
console.log(url.endsWith(2));

// ? 19.2.3 Кстати, можно указать ещё второй параметр, который означает индекс символа в строке, с которого надо начинать поиск совпадения, т.к. не всегда может быть удобно искать с начала строки.
console.log(url.startsWith('www.', 8));
console.log(url.startsWith('www.', 9));

// ====== //
// ? 19.3.0 Метод "includes" позволяет проверить, содержит ли строка определённое значение, причём не важно в каком месте.
// 19.3.1 Этот метод чувствителен к регистру и это надо учитывать, а при необходимости приводить всё к нижнему регистру методом "toLowerCase" для нормальной работы.
console.log(url.includes('my-article'));
console.log(url.includes('my-Article'));

// ====== //
// ? 19.4.0 С методами "padStart" & "padEnd" мы можем добавить отступ к строкам либо в начале, либо в конце. В параметр этих методов мы записываем длину строки, которой она должна стать после добавления отступа.
// 19.4.1 Например, здесь у строки изначально длина 11 знаков, значит, если мы хотим добавить отступ в 10 пробелов, то нам требуется указать 21. Можно указать и второй параметр, это знак, который должен подставляться вместо пробела.
const greeting = 'Hello world!';

console.log(greeting.padStart(21, '_'));

// 19.5 На следующем примере видно как можно это использовать. Например, у нас есть телефонный номер. И когда мы показываем его пользователю, то хотим показывать только последние 4 цифры.
const phoneNumber = '123456789';

const lastFourDigits = phoneNumber.slice(5, 10);

const hiddenPhoneNumber = lastFourDigits.padStart(9, '*');

console.log(hiddenPhoneNumber);

// 19.6.0 "padEnd" делает тоже самое, что и "padStart", но на конце строки.
const members = [
  { name: 'Sarah', points: 100 },
  { name: 'John', points: 84 },
  { name: 'Peter', points: 51 },
  { name: 'Anna', points: 90 },
];

// 19.6.1 Для лучшей читаемости в консоли мы можем добавить отступа в конце имени с помощью "padEnd", сделав каждую строку имени равной 15 символам.
members.map(({ name, points }) => {
  return console.log(`Name: ${name.padEnd(15)} Points: ${points}`);
});
